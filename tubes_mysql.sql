-- MySQL Script generated by MySQL Workbench
-- Wed 30 Oct 2024 10:09:58 AM WIB
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET UTF8;
SHOW WARNINGS;

USE `mydb` ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Stock Update`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Stock Update` (
  `stock-UpdateID` INT NOT NULL AUTO_INCREMENT,
  `bookID` INT NOT NULL,
  `stockDate` DATETIME NULL,
  `quantityStock` INT NULL,
  `reasonStock` TEXT NULL,
  PRIMARY KEY (`stock-UpdateID`),
  INDEX `fk_Stock Update_1_idx` (`bookID` ASC) VISIBLE,
  CONSTRAINT `fk_Stock Update_1`
    FOREIGN KEY (`bookID`)
    REFERENCES `mydb`.`Books` (`bookID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Employe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Employe` (
  `employeID` INT NOT NULL AUTO_INCREMENT,
  `name-employee` INT NULL,
  `contact-employee` VARCHAR(45) NULL UNIQUE,
  `bookID` INT NULL,
  `email-employee` VARCHAR(45) NULL UNIQUE,
  `role_employee` ENUM('admin', 'logistik', 'administrasi') NULL,
  `stock-UpdateID` INT NULL,
  PRIMARY KEY (`employeID`),
  INDEX `fk_Employe_1_idx` (`bookID` ASC) VISIBLE,
  UNIQUE INDEX `email-employee_UNIQUE` (`email-employee` ASC) VISIBLE,
  INDEX `fk_Employe_2_idx` (`stock-UpdateID` ASC) VISIBLE,
  CONSTRAINT `fk_Employe_1`
    FOREIGN KEY (`bookID`)
    REFERENCES `mydb`.`Books` (`bookID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employe_2`
    FOREIGN KEY (`stock-UpdateID`)
    REFERENCES `mydb`.`Stock Update` (`stock-UpdateID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Order` (
  `orderID` INT NOT NULL AUTO_INCREMENT,
  `OrderDate` DATETIME NULL,
  `TotalOrderAmount` DECIMAL NULL,
  `customerID` INT NULL,
  `transaksiID` INT NULL,
  PRIMARY KEY (`orderID`),
  INDEX `fk_Order_Customer1_idx` (`customerID` ASC) VISIBLE,
  INDEX `fk_Order_Sales Transaksi1_idx` (`transaksiID` ASC) VISIBLE,
  CONSTRAINT `fk_Order_Customer1`
    FOREIGN KEY (`customerID`)
    REFERENCES `mydb`.`Customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_Sales Transaksi1`
    FOREIGN KEY (`transaksiID`)
    REFERENCES `mydb`.`Sales Transaksi` (`transaksiID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Sales Transaksi`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Sales Transaksi` (
  `transaksiID` INT NOT NULL AUTO_INCREMENT,
  `transaksiDate` DATETIME NULL,
  `totalAmount` DECIMAL NULL,
  `payment-methode` ENUM('cash', 'transfer bank', 'virtual bank', 'e-wallet') NULL,
  `orderID` INT NULL,
  `employeID` INT NULL,
  PRIMARY KEY (`transaksiID`),
  INDEX `fk_Sales Transaksi_Employe1_idx` (`employeID` ASC) VISIBLE,
  INDEX `fk_Sales Transaksi_1_idx` (`orderID` ASC) VISIBLE,
  CONSTRAINT `fk_Sales Transaksi_Employe1`
    FOREIGN KEY (`employeID`)
    REFERENCES `mydb`.`Employe` (`employeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sales Transaksi_1`
    FOREIGN KEY (`orderID`)
    REFERENCES `mydb`.`Order` (`orderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Books`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Books` (
  `bookID` INT NOT NULL AUTO_INCREMENT,
  `title-book` VARCHAR(45) NULL,
  `authors-book` VARCHAR(45) NULL,
  `genre-book` ENUM('horor', 'fantasy', 'history', 'technology', 'biology', 'animal', '...') NULL,
  `stock-book` INT NULL,
  `price` DECIMAL NULL,
  `isbn` VARCHAR(45) NULL,
  `publisher` VARCHAR(45) NULL,
  `sinopsis-book` LONGTEXT NULL,
  `transaksiID` INT NULL,
  `customerID` INT NULL,
  PRIMARY KEY (`bookID`),
  INDEX `fk_Books_1_idx` (`customerID` ASC) VISIBLE,
  INDEX `fk_Books_2_idx` (`transaksiID` ASC) VISIBLE,
  CONSTRAINT `fk_Books_1`
    FOREIGN KEY (`customerID`)
    REFERENCES `mydb`.`Customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Books_2`
    FOREIGN KEY (`transaksiID`)
    REFERENCES `mydb`.`Sales Transaksi` (`transaksiID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Rekomendasi`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Rekomendasi` (
  `rekomendasiID` INT NOT NULL AUTO_INCREMENT,
  `bookID` INT NULL,
  `genre-book` VARCHAR(45) NULL,
  `title-book` VARCHAR(45) NULL,
  `authors-book` VARCHAR(45) NULL,
  PRIMARY KEY (`rekomendasiID`),
  INDEX `fk_Rekomendasi_1_idx` (`bookID` ASC) VISIBLE,
  CONSTRAINT `fk_Rekomendasi_1`
    FOREIGN KEY (`bookID`)
    REFERENCES `mydb`.`Books` (`bookID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Customer` (
  `customerID` INT NOT NULL AUTO_INCREMENT,
  `username-customer` INT NOT NULL, -- Adjusted to match foreign key requirement
  `contact-customer` VARCHAR(45) NULL,
  `email-customer` VARCHAR(45) NULL,
  `address-costumer` INT NULL,
  `rekomendasiID` INT NULL,
  PRIMARY KEY (`customerID`),
  UNIQUE INDEX `email-customer_UNIQUE` (`email-customer` ASC),
  CONSTRAINT `fk_Customer_1`
    FOREIGN KEY (`rekomendasiID`)
    REFERENCES `mydb`.`Rekomendasi` (`rekomendasiID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`Shipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Shipment` (
  `shipmentID` INT NOT NULL AUTO_INCREMENT,
  `shipment-date` DATETIME NULL,
  `delivery-method` ENUM('pick up', 'delivery') NULL,
  `shipment-addressID` INT NULL,
  `status-shipment` ENUM('shipped', 'pending', 'delivered', 'canceled') NULL, -- Updated ENUM values
  `trackingNumber-shipment` VARCHAR(45) NULL UNIQUE,
  `orderID` INT NULL,
  PRIMARY KEY (`shipmentID`),
  INDEX `fk_Shipment_Order1_idx` (`orderID` ASC),
  CONSTRAINT `fk_Shipment_Order1`
    FOREIGN KEY (`orderID`)
    REFERENCES `mydb`.`Order` (`orderID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`Address-Costumer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Address-Costumer` (
  `address-costumer` INT NOT NULL AUTO_INCREMENT,
  `state-address` VARCHAR(45) NULL,
  `city-address` VARCHAR(45) NULL,
  `postal-code` VARCHAR(45) NULL,
  `country-address` ENUM('indonesia', 'japan', 'singapore', 'malaysia', 'china', 'philipine', 'australia', '...') NULL,
  `customerID` INT NULL,
  PRIMARY KEY (`address-costumer`),
  INDEX `fk_Address-Costumer_Customer2_idx` (`customerID` ASC) VISIBLE,
  CONSTRAINT `fk_Address-Costumer_Customer2`
    FOREIGN KEY (`customerID`)
    REFERENCES `mydb`.`Customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Name-Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Name-Customer` (
  `username-customerID` INT NOT NULL AUTO_INCREMENT,  
  `first-name-customer` VARCHAR(45) NULL,
  `last-name-customer` VARCHAR(45) NULL,
  `customerID` INT NULL,
  PRIMARY KEY (`username-customerID`),
  CONSTRAINT `fk_Name-Customer_Customer2`
    FOREIGN KEY (`customerID`)
    REFERENCES `mydb`.`Customer` (`customerID`) -- Corrected the foreign key to `customerID`
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `mydb`.`Name-Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Name-Employee` (
  `name-employeeID` INT NOT NULL AUTO_INCREMENT,
  `first-name-employee` VARCHAR(45) NULL,
  `last-name-customer` VARCHAR(45) NULL,
  `username-employee` VARCHAR(45) NULL,
  `employeID` INT NULL,
  PRIMARY KEY (`name-employeeID`),
  INDEX `fk_Name-Employee_Employe1_idx` (`employeID` ASC) VISIBLE,
  CONSTRAINT `fk_Name-Employee_Employe1`
    FOREIGN KEY (`employeID`)
    REFERENCES `mydb`.`Employe` (`employeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `mydb`.`Shipment-Address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Shipment-Address` (
  `shipment-addressID` INT NOT NULL AUTO_INCREMENT,
  `shipment-address-city` VARCHAR(45) NULL,
  `shipment-address-country` VARCHAR(45) NULL,
  `shipment-address-state` VARCHAR(45) NULL,
  `shipment-address-postal-code` VARCHAR(45) NULL,
  `shipmentID` INT NULL,
  PRIMARY KEY (`shipment-addressID`),
  INDEX `fk_Shipment-Address_Shipment1_idx` (`shipmentID` ASC) VISIBLE,
  CONSTRAINT `fk_Shipment-Address_Shipment1`
    FOREIGN KEY (`shipmentID`)
    REFERENCES `mydb`.`Shipment` (`shipmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO `Customer` (`username-customer`, `contact-customer`, `email-customer`, `address-costumer`, `rekomendasiID`)
VALUES 
(101, '33243456', 'cusmer1@example.com', NULL, NULL),
(102, '23456890', 'ustr1@example.com', NULL, NULL),
(103, '12347890', '2123stom1@example.com', NULL, NULL),
(104, '14567890', 'tm3211@example.com', NULL, NULL),
(105, '34214567', 'mer121@example.com', NULL, NULL),
(106, '43456890', '32strsfa1@example.com', NULL, NULL),
(107, '22347890', '1ctom1wqw@example.com', NULL, NULL),
(108, '44567890', '21ctm1sa@example.com', NULL, NULL),
(109, '38874567', 'eqwctomerdwag1@example.com', NULL, NULL),
(110, '23450090', 'vrscstr1dwa@example.com', NULL, NULL),
(111, '32145890', 'e3q2o231m1@example.com', NULL, NULL),
(112, '31267890', '31um144@example.com', NULL, NULL),
(113, '34123567', 'gtrustomer31241@example.com', NULL, NULL),
(114, '24532890', 'htjustr1fesxf@example.com', NULL, NULL),
(115, '13234790', 'njmutomrewg1@example.com', NULL, NULL),
(116, '14568990', 'klhcutm1grwer@example.com', NULL, NULL),
(117, '78734567', 'loicstomerqqe1@example.com', NULL, NULL),
(118, '79456890', 'ipustr1ee3q@example.com', NULL, NULL),
(119, '96347890', 'uyrstom879781@example.com', NULL, NULL),
(120, '87567890', 'tuiftcutm1htf@example.com', NULL, NULL),
(121, '30004567', 'fewecomefesdr1@example.com', NULL, NULL),
(122, '83456890', 'e3qwcustrads1@example.com', NULL, NULL),
(123, '72347890', 'ewqfctodasm1@example.com', NULL, NULL),
(124, '89567890', 'rtwcutfersm1@edawdxample.com', NULL, NULL),
(125, '34567000', 'fewjwcuomdwweer1@example.com', NULL, NULL);

-- Data Insertion for the `Name-Customer` table
INSERT INTO `Name-Customer` (`customerID`, `first-name-customer`, `last-name-customer`, `username-customerID`)
VALUES 
(1, 'John', 'C', 101),
(2, 'John', 'Smith', 102),
(3, 'Sarah', 'Davis', 103),
(4, 'Emily', 'Stomer', 104),
(5, 'Taylor', 'Custom', 105),
(6, 'Fist', 'Cuomer', 106),
(7, 'William', 'Ctomer', 107),
(8, 'Wlan', 'Tomer', 108),
(9, 'Fir', 'Tom', 109),
(10, 'Olive', 'Oil', 110),
(11, 'Wiliam', 'Taylor', 111),
(12, 'Liam', 'Black', 112),
(13, 'Tom', 'Custom', 113),
(14, 'Bean', 'Hill', 114),
(15, 'Thomas', 'Ctomer', 115),
(16, 'Lewis', 'Stomer', 116),
(17, 'Aca', 'Custom', 117),
(18, 'Ava', 'Cuomer', 118),
(19, 'Scot', 'Ctomer', 119),
(20, 'Ethan', 'stomer', 120),
(21, 'Mia', 'Custom', 121),
(22, 'Allen', 'Cuomerso', 122),
(23, 'Clark', 'Ctomer', 123),
(24, 'Young', 'Stomer', 124),
(25, 'Allan', 'Wake', 125);

-- Data Insertion for the `Shipment` table
INSERT INTO `Shipment` (`shipmentID`, `shipment-date`, `delivery-method`, `shipment-addressID`, `status-shipment`, `trackingNumber-shipment`, `orderID`)
VALUES 
(1, NOW(), 'delivery', 1, 'shipped', 'TRACK123', 1),
(2, NOW(), 'delivery', 2, 'pending', 'TRACK124', 2),
(3, NOW(), 'pick up', 3, 'delivered', 'TRACK125', 3),
(4, NOW(), 'delivery', 4, 'canceled', 'TRACK126', 4),
(5, NOW(), 'delivery', 5, 'shipped', 'TRACK127', 5),
(6, NOW(), 'delivery', 6, 'pending', 'TRACK128', 6),
(7, NOW(), 'pick up', 7, 'delivered', 'TRACK129', 7),
(8, NOW(), 'delivery', 8, 'canceled', 'TRACK130', 8),
(9, NOW(), 'delivery', 9, 'shipped', 'TRACK131', 9),
(10, NOW(), 'delivery', 10, 'pending', 'TRACK132', 10),
(11, NOW(), 'pick up', 11, 'delivered', 'TRACK133', 11),
(12, NOW(), 'delivery', 12, 'canceled', 'TRACK134', 12),
(13, NOW(), 'delivery', 13, 'shipped', 'TRACK135', 13),
(14, NOW(), 'delivery', 14, 'pending', 'TRACK136', 14),
(15, NOW(), 'pick up', 15, 'delivered', 'TRACK137', 15),
(16, NOW(), 'delivery', 16, 'canceled', 'TRACK138', 16),
(17, NOW(), 'delivery', 17, 'shipped', 'TRACK139', 17),
(18, NOW(), 'delivery', 18, 'pending', 'TRACK140', 18),
(19, NOW(), 'pick up', 19, 'delivered', 'TRACK141', 19),
(20, NOW(), 'delivery', 20, 'canceled', 'TRACK142', 20),
(21, NOW(), 'delivery', 21, 'shipped', 'TRACK143', 21),
(22, NOW(), 'delivery', 22, 'pending', 'TRACK144', 22),
(23, NOW(), 'pick up', 23, 'delivered', 'TRACK145', 23),
(24, NOW(), 'delivery', 24, 'canceled', 'TRACK146', 24),
(25, NOW(), 'delivery', 25, 'shipped', 'TRACK147', 25);

-- Insert data into Address-Costumer table
INSERT INTO `Address-Costumer` (`address-costumer`, `state-address`, `city-address`, `postal-code`, `country-address`, `customerID`)
VALUES 
(1, 'State A', 'City A', '12345', 'indonesia', 1),
(2, 'State B', 'City B', '23456', 'japan', 2),
(3, 'State C', 'City C', '34567', 'singapore', 3),
(4, 'State D', 'City D', '45678', 'malaysia', 4),
(5, 'State E', 'City E', '56789', 'china', 5),
(6, 'State F', 'City F', '67890', 'philipine', 6),
(7, 'State G', 'City G', '78901', 'australia', 7),
(8, 'State H', 'City H', '89012', 'indonesia', 8),
(9, 'State I', 'City I', '90123', 'japan', 9),
(10, 'State J', 'City J', '01234', 'singapore', 10),
(11, 'State K', 'City K', '12345', 'malaysia', 11),
(12, 'State L', 'City L', '23456', 'china', 12),
(13, 'State M', 'City M', '34567', 'philipine', 13),
(14, 'State N', 'City N', '45678', 'australia', 14),
(15, 'State O', 'City O', '56789', 'indonesia', 15),
(16, 'State P', 'City P', '67890', 'japan', 16),
(17, 'State Q', 'City Q', '78901', 'singapore', 17),
(18, 'State R', 'City R', '89012', 'malaysia', 18),
(19, 'State S', 'City S', '90123', 'china', 19),
(20, 'State T', 'City T', '01234', 'philipine', 20),
(21, 'State U', 'City U', '12345', 'australia', 21),
(22, 'State V', 'City V', '23456', 'indonesia', 22),
(23, 'State W', 'City W', '34567', 'japan', 23),
(24, 'State X', 'City X', '45678', 'singapore', 24),
(25, 'State Y', 'City Y', '56789', 'malaysia', 25);

-- Insert data into Rekomendasi table (no foreign key dependency)
INSERT INTO `Rekomendasi` (`rekomendasiID`, `bookID`, `genre-book`, `title-book`, `authors-book`)
VALUES 
(1, 1, 'fantasy', 'Book Title 1', 'Author 1'),
(2, 2, 'horor', 'Book Title 2', 'Author 2'),
(3, 3, 'history', 'Book Title 3', 'Author 3'),
(4, 4, 'technology', 'Book Title 4', 'Author 4'),
(5, 5, 'biology', 'Book Title 5', 'Author 5'),
(6, 6, 'animal', 'Book Title 6', 'Author 6'),
(7, 7, 'fantasy', 'Book Title 7', 'Author 7'),
(8, 8, 'horor', 'Book Title 8', 'Author 8'),
(9, 9, 'history', 'Book Title 9', 'Author 9'),
(10, 10, 'technology', 'Book Title 10', 'Author 10'),
(11, 11, 'biology', 'Book Title 11', 'Author 11'),
(12, 12, 'animal', 'Book Title 12', 'Author 12'),
(13, 13, 'fantasy', 'Book Title 13', 'Author 13'),
(14, 14, 'horor', 'Book Title 14', 'Author 14'),
(15, 15, 'history', 'Book Title 15', 'Author 15'),
(16, 16, 'technology', 'Book Title 16', 'Author 16'),
(17, 17, 'biology', 'Book Title 17', 'Author 17'),
(18, 18, 'animal', 'Book Title 18', 'Author 18'),
(19, 19, 'fantasy', 'Book Title 19', 'Author 19'),
(20, 20, 'horor', 'Book Title 20', 'Author 20'),
(21, 21, 'history', 'Book Title 21', 'Author 21'),
(22, 22, 'technology', 'Book Title 22', 'Author 22'),
(23, 23, 'biology', 'Book Title 23', 'Author 23'),
(24, 24, 'animal', 'Book Title 24', 'Author 24'),
(25, 25, 'fantasy', 'Book Title 25', 'Author 25');

-- Insert data into Books table
INSERT INTO `Books` (`bookID`, `title-book`, `authors-book`, `genre-book`, `stock-book`, `price`, `isbn`, `publisher`, `sinopsis-book`, `transaksiID`, `customerID`)
VALUES 
(1, 'Book Title 1', 'Author 1', 'fantasy', 10, 19.99, '1234567890', 'Publisher A', 'A thrilling adventure.', 1, 1);

-- Insert data into Employe table
INSERT INTO `Employe` (`employeID`, `name-employee`, `contact-employee`, `bookID`, `email-employee`, `role_employee`, `stock-UpdateID`)
VALUES 
(1, 201, '987-654-3210', 1, 'employe1@example.com', 'admin', 1);

-- Insert data into Stock Update table
INSERT INTO `Stock Update` (`stock-UpdateID`, `bookID`, `stockDate`, `quantityStock`, `reasonStock`)
VALUES 
(1, 1, NOW(), 50, 'Initial Stock'),
(2, 1, NOW(), 10, 'Stock Update');

-- Insert data into Sales Transaksi table
INSERT INTO `Sales Transaksi` (`transaksiID`, `transaksiDate`, `totalAmount`, `payment-methode`, `orderID`, `employeID`)
VALUES 
(1, NOW(), 100.00, 'cash', 1, 1),
(2, NOW(), 40.00, 'cash', 2, 1),
(3, NOW(), 30.00, 'e-wallet', 3, 1),
(4, NOW(), 20.00, 'e-wallet', 4, 1),
(5, NOW(), 100.00, 'e-wallet', 5, 1),
(6, NOW(), 80.00, 'transfer bank', 6, 1),
(7, NOW(), 90.00, 'transfer bank', 7, 1),
(8, NOW(), 20.00, 'cash', 8, 1),
(9, NOW(), 100.00, 'cash', 9, 1),
(10, NOW(), 40.00, 'transfer bank', 10, 1),
(11, NOW(), 30.00, 'transfer bank', 11, 1),
(12, NOW(), 20.00, 'virtual bank', 12, 1),
(13, NOW(), 100.00, 'cash', 13, 1),
(14, NOW(), 40.00, 'virtual bank', 14, 1),
(15, '2023-01-15 10:00:00', 30.00, 'cash', 15, 1),
(16, '2023-01-20 12:30:00', 20.00, 'e-wallet', 16, 1),
(17, '2023-01-25 15:45:00', 100.00, 'cash', 17, 1),
(18, '2023-02-10 09:15:00', 40.00, 'virtual bank', 18, 1),
(19, '2023-02-18 16:50:00', 30.00, 'cash', 19, 1),
(20, '2023-03-05 11:20:00', 20.00, 'virtual bank', 20, 1),
(21, '2023-03-22 14:35:00', 100.00, 'cash', 21, 1),
(22, '2023-04-10 10:40:00', 40.00, 'virtual bank', 22, 1),
(23, '2023-04-18 13:00:00', 30.00, 'cash', 23, 1),
(24, '2023-05-02 09:50:00', 20.00, 'virtual bank', 24, 1),
(25, '2023-05-20 15:30:00', 100.00, 'cash', 25, 1);

-- Insert data into Order table
INSERT INTO `Order` (`orderID`, `OrderDate`, `TotalOrderAmount`, `customerID`, `transaksiID`)
VALUES 
(1, NOW(), 100.00, 1, 1),
(2, NOW(), 40.00, 2, 2),
(3, NOW(), 30.00, 3, 3),
(4, NOW(), 20.00, 4, 4),
(5, NOW(), 100.00, 5, 5),
(6, NOW(), 80.00, 6, 6),
(7, NOW(), 90.00, 7, 7),
(8, NOW(), 20.00, 8, 8),
(9, NOW(), 100.00, 9, 9),
(10, NOW(), 40.00, 10, 10),
(11, NOW(), 30.00, 11, 11),
(12, NOW(), 20.00, 12, 12),
(13, NOW(), 100.00, 13, 13),
(14, NOW(), 40.00, 14, 14),
(15, NOW(), 30.00, 15, 15),
(16, NOW(), 20.00, 16, 16),
(17, NOW(), 100.00, 17, 17),
(18, NOW(), 40.00, 18, 18),
(19, NOW(), 30.00, 19, 19),
(20, NOW(), 20.00, 20, 20),
(21, NOW(), 100.00, 21, 21),
(22, NOW(), 40.00, 22, 22),
(23, NOW(), 30.00, 23, 23),
(24, NOW(), 20.00, 24, 24),
(25, NOW(), 100.00, 25, 25);


-- Insert data into Shipment-Address table
INSERT INTO `Shipment-Address` (`shipment-addressID`, `shipment-address-city`, `shipment-address-country`, `shipment-address-state`, `shipment-address-postal-code`, `shipmentID`)
VALUES 
(1, 'City A', 'indonesia', 'State A', '12345', 1),
(2, 'City B', 'japan', 'State B', '23456', 2),
(3, 'City C', 'singapore', 'State C', '34567', 3),
(4, 'City D', 'malaysia', 'State D', '45678', 4),
(5, 'City E', 'china', 'State E', '56789', 5),
(6, 'City F', 'philipine', 'State F', '67890', 6),
(7, 'City G', 'australia', 'State G', '78901', 7),
(8, 'City H', 'indonesia', 'State H', '89012', 8),
(9, 'City I', 'japan', 'State I', '90123', 9),
(10, 'City J', 'singapore', 'State J', '01234', 10),
(11, 'City K', 'malaysia', 'State K', '12345', 11),
(12, 'City L', 'china', 'State L', '23456', 12),
(13, 'City M', 'philipine', 'State M', '34567', 13),
(14, 'City N', 'australia', 'State N', '45678', 14),
(15, 'City O', 'indonesia', 'State O', '56789', 15),
(16, 'City P', 'japan', 'State P', '67890', 16),
(17, 'City Q', 'singapore', 'State Q', '78901', 17),
(18, 'City R', 'malaysia', 'State R', '89012', 18),
(19, 'City S', 'china', 'State S', '90123', 19),
(20, 'City T', 'philipine', 'State T', '01234', 20),
(21, 'City U', 'australia', 'State U', '12345', 21),
(22, 'City V', 'indonesia', 'State V', '23456', 22),
(23, 'City W', 'japan', 'State W', '34567', 23),
(24, 'City X', 'singapore', 'State X', '45678', 24),
(25, 'City Y', 'malaysia', 'State Y', '56789', 25);

-- Insert data into Name-Employee table
INSERT INTO `Name-Employee` (`name-employeeID`, `first-name-employee`, `last-name-customer`, `username-employee`, `employeID`)
VALUES 
(1, 'John', 'Doe', 'johndoe', 1),
(2, 'Jane', 'Smith', 'janesmith', 2),
(3, 'Alice', 'Johnson', 'alicejohnson', 3),
(4, 'Bob', 'Brown', 'bobbrown', 4),
(5, 'Charlie', 'Davis', 'charliedavis', 5),
(6, 'David', 'Wilson', 'davidwilson', 6),
(7, 'Eve', 'Moore', 'evemoore', 7),
(8, 'Frank', 'Taylor', 'franktaylor', 8),
(9, 'Grace', 'Anderson', 'graceanderson', 9),
(10, 'Henry', 'Martinez', 'henrymartinez', 10),
(11, 'Ivy', 'Hernandez', 'ivyhernandez', 11),
(12, 'Jack', 'Young', 'jackyoung', 12),
(13, 'Kelly', 'King', 'kellyking', 13),
(14, 'Liam', 'Wright', 'liamwright', 14),
(15, 'Mia', 'Lopez', 'mialopez', 15),
(16, 'Noah', 'Hill', 'noahhill', 16),
(17, 'Olivia', 'Scott', 'oliviascott', 17),
(18, 'Peter', 'Green', 'petergreen', 18),
(19, 'Quinn', 'Adams', 'quinnadams', 19),
(20, 'Ryan', 'Baker', 'ryanbaker', 20),
(21, 'Sara', 'Perez', 'saraperez', 21),
(22, 'Tom', 'Evans', 'tomevans', 22),
(23, 'Uma', 'Collins', 'umacollins', 23),
(24, 'Vince', 'Reed', 'vincereed', 24),
(25, 'Wendy', 'Morris', 'wendymorris', 25);

-- Query 1: Total orders and total amount for each customer, ordered by total amount in descending order
CREATE TABLE IF NOT EXISTS `mydb`.`customer_order` AS
SELECT 
    c.`customerID`,
    CONCAT(nc.`first-name-customer`, ' ', nc.`last-name-customer`) AS `Customer Name`,
    st.`payment-methode` AS `Payment Method`,
    COUNT(o.`orderID`) AS `Total Orders`,
    SUM(o.`TotalOrderAmount`) AS `Total Order Amount`
FROM `Customer` c
INNER JOIN `Name-Customer` nc ON c.`customerID` = nc.`customerID`
INNER JOIN `Order` o ON c.`customerID` = o.`customerID`
INNER JOIN `Sales Transaksi` st ON o.`transaksiID` = st.`transaksiID`
GROUP BY c.`customerID`, nc.`first-name-customer`, nc.`last-name-customer`, st.`payment-methode`
ORDER BY `customerID` ASC;

-- Query 2: Book transactions with stock updates in the last 60 days
CREATE TABLE IF NOT EXISTS `mydb`.`book_transaction` AS
SELECT 
    b.`bookID`,
    b.`title-book`,
    MAX(su.`stockDate`) AS `Last Stock Update`,
    SUM(su.`quantityStock`) AS `Total Stock Added`
FROM `Books` b
INNER JOIN `Stock Update` su ON b.`bookID` = su.`bookID`
WHERE su.`stockDate` >= NOW() - INTERVAL 60 DAY
GROUP BY b.`bookID`
ORDER BY `Last Stock Update` DESC;

-- Query 3: Total transactions and total amount managed by employees in a specific role
CREATE TABLE IF NOT EXISTS `mydb`.`employee_transaction` AS
SELECT 
    e.`employeID`,
    CONCAT(ne.`first-name-employee`, ' ', ne.`last-name-customer`) AS `Employee Name`,
    COUNT(st.`transaksiID`) AS `Total Transactions`,
    SUM(st.`totalAmount`) AS `Total Amount`
FROM `Employe` e
INNER JOIN `Name-Employee` ne ON e.`employeID` = ne.`employeID`
INNER JOIN `Sales Transaksi` st ON e.`employeID` = st.`employeID`
WHERE e.`role_employee` = 'admin'
GROUP BY e.`employeID`, ne.`first-name-employee`, ne.`last-name-customer`
ORDER BY `Total Amount` DESC;

-- Query 4: Total shipments for each city with a 'pending' status
CREATE TABLE IF NOT EXISTS `mydb`.`shipment_transaction` AS
SELECT 
    sa.`shipment-address-city` AS `City`,
    COUNT(s.`shipmentID`) AS `Total Shipments`
FROM `Shipment` s
INNER JOIN `Shipment-Address` sa ON s.`shipmentID` = sa.`shipmentID`
WHERE s.`status-shipment` = 'pending'
GROUP BY sa.`shipment-address-city`
ORDER BY `Total Shipments` DESC;

-- Query 5: Recommended books for a specific genre with stock > 0
CREATE TABLE IF NOT EXISTS `mydb`.`rekomendasi_customer` AS
SELECT 
    r.`genre-book`,
    r.`title-book` AS `Recommended Book`,
    r.`authors-book`
FROM `Rekomendasi` r
INNER JOIN `Books` b ON r.`bookID` = b.`bookID`
WHERE r.`genre-book` = 'fantasy' AND b.`stock-book` > 0
GROUP BY r.`title-book`, r.`authors-book`
ORDER BY r.`title-book` ASC;

-- tambahan 
CREATE TABLE IF NOT EXISTS `mydb`.`sales_trend_last_week` (
    `Tanggal` DATE NOT NULL,
    `Total Transaksi` INT NOT NULL,
    `Total Penjualan` DECIMAL(10,2) NOT NULL,
    `Rata-rata Penjualan` DECIMAL(10,2) NOT NULL,
    `Pertumbuhan (%)` DECIMAL(10,2) NULL,
    PRIMARY KEY (`Tanggal`)
);

INSERT INTO `mydb`.`sales_trend_last_week` (`Tanggal`, `Total Transaksi`, `Total Penjualan`, `Rata-rata Penjualan`, `Pertumbuhan (%)`)
SELECT 
    DATE(st.transaksiDate) AS `Tanggal`,
    COUNT(st.transaksiID) AS `Total Transaksi`,
    SUM(st.totalAmount) AS `Total Penjualan`,
    ROUND(AVG(st.totalAmount), 2) AS `Rata-rata Penjualan`,
    ROUND(
        (SUM(st.totalAmount) - 
        LAG(SUM(st.totalAmount)) OVER (ORDER BY DATE(st.transaksiDate))) / 
        LAG(SUM(st.totalAmount)) OVER (ORDER BY DATE(st.transaksiDate)) * 100, 
        2
    ) AS `Pertumbuhan (%)`
FROM 
    `Sales Transaksi` st
WHERE 
    st.transaksiDate >= '2023-01-01 00:00:00' -- Data mulai dari tahun 2023
    OR st.transaksiDate >= NOW() - INTERVAL 7 DAY -- Data minggu terakhir
GROUP BY 
    DATE(st.transaksiDate)
ORDER BY 
    DATE(st.transaksiDate) ASC;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
